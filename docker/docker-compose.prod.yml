version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: housing_econometrics_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - econometrics_network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: housing_econometrics_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-housing_econometrics}
      POSTGRES_USER: ${POSTGRES_USER:-econometrics_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/backup:/backup
    networks:
      - econometrics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-econometrics_user} -d ${POSTGRES_DB:-housing_econometrics}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: housing_econometrics_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - econometrics_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Application
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: housing_econometrics_api_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-econometrics_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-housing_econometrics}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - HOST=0.0.0.0
      - PORT=8000
      - RELOAD=false
      - LOG_LEVEL=info
      - ENVIRONMENT=production
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - ../results:/app/results
    networks:
      - econometrics_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: housing_econometrics_celery_prod
    command: celery -A api.core.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-econometrics_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-housing_econometrics}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - ../results:/app/results
    networks:
      - econometrics_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: housing_econometrics_celery_beat_prod
    command: celery -A api.core.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-econometrics_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-housing_econometrics}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    networks:
      - econometrics_network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: housing_econometrics_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - econometrics_network
    restart: unless-stopped

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: housing_econometrics_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - econometrics_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  econometrics_network:
    driver: bridge
